from tabulate import tabulate
# Cosmetic
bold = '\033[1m'
#cyan = '\033[96m'
end = '\033[0m'
#gold = '\033[38;2;255;215;0m'
green = '\033[92m'
italic = '\033[3m'
red = '\033[31m'

# Input Values
D1 = float(input(italic+bold+"D1 = "))
D2 = float(input(italic+bold+"D2 = "))
D3 = float(input(italic+bold+"D3 = "))
Weight = float(input(italic+bold+"Weight = "))

# Conditons for if X, Y, or Z are negative
def ensure_positive(value): 
	if value < 0:
			return 0
	else:
			return value

# Output Values and Threshold Messages
def check_value(name, value, threshold):
 if value == 0:
	 print(italic+bold+f"{name} = 0")
	 print(italic+green+f"Double check the {name} value, otherwise {name} passes")
 elif value > threshold:
		print(italic+red+f"{name} = {value:.4f}")
		print(italic+red+f"{name} Failed")
 else:
			print(italic+green+f"{name} = {value:.4f}")
			print(italic+green+f"{name} Passed")

# Calculations
X = ensure_positive(D1-(Weight * 0.0000155))
Y = ensure_positive(D2-(Weight *  0.0000155))
Z = ensure_positive((D3*1.25)- (Weight * 0.0000318))
H = Z+((X + Y)/2)
equation = [
	["X = (D1-(Weight*0.0000155))", X],
	["Y = (D2-(Weight*0.0000155))", Y],
	["Z = (D3-(Weight*0.0000318))", Z],
	["H = Z+((X+Y)/2)", H]
]
head= ["Input", "Output"]
print (tabulate(equation, headers =head, tablefmt="grid"))
# Threshold Checks
check_value("X",X,0.060)
check_value("Y",Y,0.060)
check_value("Z",Z, 0.050)
check_value("H",H, 0.051)